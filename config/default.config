import nextflow.util.SysHelper

// Default inputs/parameters of the pipeline
params {
    max_cpus   = SysHelper.getAvailCpus()
    max_memory = SysHelper.getAvailMemory()
    min_cpus = 1
    min_memory = 1.MB

    ucla_cds = true

    jvm_fraction = 0.85

    // default docker container registry
    docker_container_registry = "ghcr.io/uclahs-cds"

    // Docker images
    pipeval_version = "4.0.0-rc.2"
    fastqc_version = "0.12.1_samtools-1.20"
    samtools_version = "1.20"
    picard_version = "3.1.0"
    qualimap_version = "2.3"
    docker_image_validate_params = "${-> params.docker_container_registry}/pipeval:${params.pipeval_version}"
    docker_image_fastqc = "${-> params.docker_container_registry}/fastqc:${params.fastqc_version}"
    docker_image_samtools = "${-> params.docker_container_registry}/samtools:${params.samtools_version}"
    docker_image_picard = "${-> params.docker_container_registry}/picard:${params.picard_version}"
    docker_image_qualimap = "${-> params.docker_container_registry}/qualimap:${params.qualimap_version}"
}

// Process specific scope
process {
    // Process results are stored to local cache.
    // If pipeline is launched with the 'resume' option, existing cache results will be used when available
    // rather than re-executing processes
    cache = true

    // Forward process 'stdout' to shell terminal and, consequently, the log file
    echo = false
    executor = 'local'

    // Other directives or options that should apply for every process

    // total amount of resources avaible to the pipeline
    cpus = params.max_cpus
    memory = params.max_memory
}

// Enable Docker and configure docker-related options like user and group IDs
docker {
    enabled = true
    // Pass user's UID/GID and group IDs to Docker
    uid_and_gid = "-u \$(id -u):\$(id -g)"
    all_group_ids = "\$(for i in `id --real --groups`; do echo -n \"--group-add=\$i \"; done)"

    runOptions = "${uid_and_gid} ${all_group_ids}"
}
